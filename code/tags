!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRAY_COUNT	.\handmade.h	10;"	d
ASSERT	.\handmade.h	18;"	d
ASSERT	.\handmade.h	21;"	d
CommonCompilerFlags	.\build.bat	/^set CommonCompilerFlags=-Gm -Zi -MT -nologo -GR- -EHa- -Oi -Od -W4 -wd4100 -wd4189 -wd4201 -DDEBUG_MODE=1 -DHANDMADE_WIN32=1 -FC $/;"	v
CommonLinkerFlags	.\build.bat	/^set CommonLinkerFlags=-incremental:no -opt:ref winmm.lib user32.lib gdi32.lib$/;"	v
DEBUGFreeFileMemory	.\handmade.h	/^    debug_free_file_memory *DEBUGFreeFileMemory;$/;"	m	struct:GameMemory
DEBUGFreeFileMemory	.\handmade.h	/^DEBUG_FREE_FILE_MEMORY(DEBUGFreeFileMemory);$/;"	v
DEBUGReadEntireFile	.\handmade.h	/^    debug_read_entire_file *DEBUGReadEntireFile;$/;"	m	struct:GameMemory
DEBUGReadEntireFile	.\handmade.h	/^DEBUG_READ_ENTIRE_FILE(DEBUGReadEntireFile);$/;"	v
DEBUGWriteEntireFile	.\handmade.h	/^    debug_write_entire_file *DEBUGWriteEntireFile;$/;"	m	struct:GameMemory
DEBUGWriteEntireFile	.\handmade.h	/^DEBUG_WRITE_ENTIRE_FILE(DEBUGWriteEntireFile);$/;"	v
DEBUG_FREE_FILE_MEMORY	.\handmade.h	38;"	d
DEBUG_FREE_FILE_MEMORY	.\win32_handmade.cpp	/^DEBUG_FREE_FILE_MEMORY(DEBUGFreeFileMemory)$/;"	f
DEBUG_READ_ENTIRE_FILE	.\handmade.h	29;"	d
DEBUG_READ_ENTIRE_FILE	.\win32_handmade.cpp	/^DEBUG_READ_ENTIRE_FILE(DEBUGReadEntireFile)$/;"	f
DEBUG_WRITE_ENTIRE_FILE	.\handmade.h	33;"	d
DEBUG_WRITE_ENTIRE_FILE	.\win32_handmade.cpp	/^DEBUG_WRITE_ENTIRE_FILE(DEBUGWriteEntireFile)$/;"	f
DIRECTSOUND_CREATE	.\win32_handmade.cpp	291;"	d	file:
FrameBuffer	.\handmade.h	/^struct FrameBuffer {$/;"	s
GAME_GET_SOUND_SAMPLES	.\handmade.cpp	/^extern "C" GAME_GET_SOUND_SAMPLES(gameGetSoundSamples)$/;"	f
GAME_GET_SOUND_SAMPLES	.\handmade.h	/^GAME_GET_SOUND_SAMPLES(gameGetSoundSamplesStub)$/;"	f
GAME_GET_SOUND_SAMPLES	.\handmade.h	141;"	d
GAME_UPDATE_AND_RENDER	.\handmade.cpp	/^extern "C" GAME_UPDATE_AND_RENDER(gameUpdateAndRender) $/;"	f
GAME_UPDATE_AND_RENDER	.\handmade.h	/^GAME_UPDATE_AND_RENDER(gameUpdateAndRenderStub)$/;"	f
GAME_UPDATE_AND_RENDER	.\handmade.h	133;"	d
GIGABYTES	.\handmade.h	13;"	d
GameButtonState	.\handmade.h	/^struct GameButtonState {$/;"	s
GameControllerInput	.\handmade.h	/^struct GameControllerInput{$/;"	s
GameInput	.\handmade.h	/^struct GameInput {$/;"	s
GameMemory	.\handmade.h	/^struct GameMemory{$/;"	s
GameState	.\handmade.h	/^struct GameState {$/;"	s
HANDMADE_H	.\handmade.h	150;"	d
KILOBYTES	.\handmade.h	15;"	d
MEGABYTES	.\handmade.h	14;"	d
MainWindowCallback	.\win32_handmade.cpp	/^static LRESULT CALLBACK MainWindowCallback($/;"	f	file:
RenderPlayer	.\handmade.cpp	/^static void RenderPlayer(FrameBuffer *buffer, int playerX, int playerY)$/;"	f	file:
RenderSoundSamples	.\handmade.cpp	/^void RenderSoundSamples(FrameBuffer  *frameBuffer, SoundBuffer *soundBuffer){$/;"	f
RenderWeirdGradient	.\handmade.cpp	/^void RenderWeirdGradient(FrameBuffer *buffer,int xOffset,int yOffset)      $/;"	f
SoundBuffer	.\handmade.h	/^struct SoundBuffer{$/;"	s
TERABYTES	.\handmade.h	12;"	d
W32HANDMADE_H	.\win32_handmade.h	2;"	d
Win32ResizeDIBSection	.\win32_handmade.cpp	/^static void Win32ResizeDIBSection($/;"	f	file:
Win32displayBufferInWindow	.\win32_handmade.cpp	/^static void Win32displayBufferInWindow($/;"	f	file:
WinMain	.\win32_handmade.cpp	/^int CALLBACK WinMain($/;"	f
XInputGetState	.\win32_handmade.cpp	183;"	d	file:
XInputSetState	.\win32_handmade.cpp	195;"	d	file:
X_INPUT_GET_STATE	.\win32_handmade.cpp	/^X_INPUT_GET_STATE(xInputGetStateStub)$/;"	f
X_INPUT_GET_STATE	.\win32_handmade.cpp	174;"	d	file:
X_INPUT_SET_STATE	.\win32_handmade.cpp	/^X_INPUT_SET_STATE(xInputSetStateStub)$/;"	f
X_INPUT_SET_STATE	.\win32_handmade.cpp	186;"	d	file:
actionDown	.\handmade.h	/^            GameButtonState actionDown;$/;"	m	struct:GameControllerInput::__anon1::__anon2
actionLeft	.\handmade.h	/^            GameButtonState actionLeft;$/;"	m	struct:GameControllerInput::__anon1::__anon2
actionRight	.\handmade.h	/^            GameButtonState actionRight;$/;"	m	struct:GameControllerInput::__anon1::__anon2
actionUp	.\handmade.h	/^            GameButtonState actionUp;$/;"	m	struct:GameControllerInput::__anon1::__anon2
bitmapMemory	.\handmade.h	/^    void *bitmapMemory;$/;"	m	struct:FrameBuffer
bitmapMemory	.\win32_handmade.h	/^    void *bitmapMemory;$/;"	m	struct:win32offscreenBuffer
bool32	.\handmade.cpp	6;"	d	file:
bool32	.\handmade.h	9;"	d
buttons	.\handmade.h	/^        GameButtonState buttons[10];$/;"	m	union:GameControllerInput::__anon1
bytesPerPixel	.\handmade.h	/^    int bytesPerPixel; $/;"	m	struct:FrameBuffer
bytesPerPixel	.\win32_handmade.h	/^    int bytesPerPixel ;  $/;"	m	struct:win32offscreenBuffer
bytesPerSample	.\win32_handmade.h	/^    int bytesPerSample ;$/;"	m	struct:win32_soundOutput
catStrings	.\win32_handmade.cpp	/^void catStrings( size_t countA, char *sourceA, $/;"	f
contentSize	.\handmade.h	/^    uint32_t contentSize;$/;"	m	struct:debugReadFileResult
controllers	.\handmade.h	/^    GameControllerInput controllers[5];$/;"	m	struct:GameInput
debugReadFileResult	.\handmade.h	/^struct debugReadFileResult {$/;"	s
debug_free_file_memory	.\handmade.h	/^typedef DEBUG_FREE_FILE_MEMORY(debug_free_file_memory);$/;"	t
debug_read_entire_file	.\handmade.h	/^typedef DEBUG_READ_ENTIRE_FILE(debug_read_entire_file);$/;"	t
debug_write_entire_file	.\handmade.h	/^typedef DEBUG_WRITE_ENTIRE_FILE(debug_write_entire_file);$/;"	t
directsound_create	.\win32_handmade.cpp	/^typedef DIRECTSOUND_CREATE(directsound_create);$/;"	t	file:
endedDown	.\handmade.h	/^   bool32 endedDown;$/;"	m	struct:GameButtonState
expectedFrameBoundary	.\win32_handmade.h	/^    DWORD expectedFrameBoundary;$/;"	m	struct:win32DebugTimeMarker
fileContent	.\handmade.h	/^    void *fileContent;$/;"	m	struct:debugReadFileResult
filename	.\build.bat	/^set filename=handmade_%date:~-4,4%%date:~-10,2%%date:~-7,2%_%time:~0,2%%time:~3,2%%time:~6,2%.pdb$/;"	v
flipPlayCursor	.\win32_handmade.h	/^    DWORD flipPlayCursor;$/;"	m	struct:win32DebugTimeMarker
flipWriteCursor	.\win32_handmade.h	/^    DWORD flipWriteCursor;$/;"	m	struct:win32DebugTimeMarker
g_frameBuffer	.\win32_handmade.cpp	/^static win32offscreenBuffer g_frameBuffer;$/;"	v	file:
g_pause	.\win32_handmade.cpp	/^static bool g_pause;$/;"	v	file:
g_perfCountFrequency	.\win32_handmade.cpp	/^static int64_t g_perfCountFrequency;$/;"	v	file:
g_running	.\win32_handmade.cpp	/^static bool g_running;$/;"	v	file:
g_secondaryBuffer	.\win32_handmade.cpp	/^static LPDIRECTSOUNDBUFFER g_secondaryBuffer;$/;"	v	file:
gameCodeDLL	.\win32_handmade.cpp	/^    HMODULE gameCodeDLL;$/;"	m	struct:win32_GameCode	file:
gameOutputSound	.\handmade.cpp	/^void gameOutputSound(SoundBuffer *soundBuffer,float tSine, int toneHz)$/;"	f
game_get_sound_samples	.\handmade.h	/^typedef GAME_GET_SOUND_SAMPLES(game_get_sound_samples);$/;"	t
game_update_and_render	.\handmade.h	/^typedef GAME_UPDATE_AND_RENDER(game_update_and_render);$/;"	t
getController	.\handmade.h	/^inline GameControllerInput *getController(GameInput *input, int controllerIndex){$/;"	f
getSoundSamples	.\win32_handmade.cpp	/^    game_get_sound_samples *getSoundSamples;$/;"	m	struct:win32_GameCode	file:
global_variable	.\win32_handmade.cpp	6;"	d	file:
halfTransitionCount	.\handmade.h	/^   int halfTransitionCount; $/;"	m	struct:GameButtonState
height	.\handmade.h	/^    int height; $/;"	m	struct:FrameBuffer
height	.\win32_handmade.h	/^    int height; $/;"	m	struct:win32offscreenBuffer
height	.\win32_handmade.h	/^    int height;$/;"	m	struct:win32windowDimensions
info	.\win32_handmade.h	/^    BITMAPINFO info;$/;"	m	struct:win32offscreenBuffer
inputPlayingIndex	.\win32_handmade.h	/^    int inputPlayingIndex = 0;$/;"	m	struct:win32_State
inputRecordingIndex	.\win32_handmade.h	/^    int inputRecordingIndex = 0;$/;"	m	struct:win32_State
internal	.\win32_handmade.cpp	5;"	d	file:
isAnalog	.\handmade.h	/^    bool32 isAnalog;$/;"	m	struct:GameControllerInput
isConnected	.\handmade.h	/^    bool32 isConnected;$/;"	m	struct:GameControllerInput
isInitialized	.\handmade.h	/^    bool32 isInitialized;$/;"	m	struct:GameMemory
isValid	.\win32_handmade.cpp	/^    bool32 isValid;$/;"	m	struct:win32_GameCode	file:
lastWriteTime	.\win32_handmade.cpp	/^    FILETIME lastWriteTime;$/;"	m	struct:win32_GameCode	file:
leftShoulder	.\handmade.h	/^            GameButtonState leftShoulder;$/;"	m	struct:GameControllerInput::__anon1::__anon2
local_persist	.\win32_handmade.cpp	7;"	d	file:
moveDown	.\handmade.h	/^            GameButtonState moveDown;$/;"	m	struct:GameControllerInput::__anon1::__anon2
moveLeft	.\handmade.h	/^            GameButtonState moveLeft;$/;"	m	struct:GameControllerInput::__anon1::__anon2
moveRight	.\handmade.h	/^            GameButtonState moveRight;$/;"	m	struct:GameControllerInput::__anon1::__anon2
moveUp	.\handmade.h	/^            GameButtonState moveUp;$/;"	m	struct:GameControllerInput::__anon1::__anon2
offsetX	.\handmade.h	/^      int offsetX;$/;"	m	struct:GameState
offsetY	.\handmade.h	/^      int offsetY;$/;"	m	struct:GameState
outputByteCount	.\win32_handmade.h	/^    DWORD outputByteCount;$/;"	m	struct:win32DebugTimeMarker
outputLocation	.\win32_handmade.h	/^    DWORD outputLocation;$/;"	m	struct:win32DebugTimeMarker
outputPlayCursor	.\win32_handmade.h	/^    DWORD outputPlayCursor;$/;"	m	struct:win32DebugTimeMarker
outputWriteCursor	.\win32_handmade.h	/^    DWORD outputWriteCursor;$/;"	m	struct:win32DebugTimeMarker
pXinputGetState	.\win32_handmade.cpp	/^static x_input_get_state *pXinputGetState = xInputGetStateStub;$/;"	v	file:
pXinputSetState	.\win32_handmade.cpp	/^static x_input_set_state *pXinputSetState = xInputSetStateStub;$/;"	v	file:
permanentStorage	.\handmade.h	/^    void *permanentStorage;$/;"	m	struct:GameMemory
permanentStorageSize	.\handmade.h	/^    uint64_t permanentStorageSize;$/;"	m	struct:GameMemory
pi	.\handmade.cpp	7;"	d	file:
pitch	.\handmade.h	/^    int pitch;  $/;"	m	struct:FrameBuffer
pitch	.\win32_handmade.h	/^    int pitch;  $/;"	m	struct:win32offscreenBuffer
playbackHandle	.\win32_handmade.h	/^    HANDLE playbackHandle;$/;"	m	struct:win32_State
playerX	.\handmade.h	/^      int playerX;$/;"	m	struct:GameState
playerY	.\handmade.h	/^      int playerY;$/;"	m	struct:GameState
recordingHandle	.\win32_handmade.h	/^    HANDLE recordingHandle;$/;"	m	struct:win32_State
rightShoulder	.\handmade.h	/^            GameButtonState rightShoulder;$/;"	m	struct:GameControllerInput::__anon1::__anon2
runningSampleIndex	.\win32_handmade.h	/^    uint32_t runningSampleIndex ;$/;"	m	struct:win32_soundOutput
safeTruncateUint64	.\handmade.h	/^inline int32_t safeTruncateUint64(uint64_t value) {$/;"	f
safetyBytes	.\win32_handmade.h	/^    DWORD safetyBytes;$/;"	m	struct:win32_soundOutput
sampleCount	.\handmade.h	/^    int sampleCount;$/;"	m	struct:SoundBuffer
sampleLatency	.\win32_handmade.h	/^    int sampleLatency;$/;"	m	struct:win32_soundOutput
samples	.\handmade.h	/^    int16_t *samples;  $/;"	m	struct:SoundBuffer
samplesPerSecond	.\handmade.h	/^    int samplesPerSecond;$/;"	m	struct:SoundBuffer
samplesPerSecond	.\win32_handmade.h	/^    int samplesPerSecond ;$/;"	m	struct:win32_soundOutput
secondaryBufferSize	.\win32_handmade.h	/^    int secondaryBufferSize ;$/;"	m	struct:win32_soundOutput
stickAverageX	.\handmade.h	/^    float stickAverageX;$/;"	m	struct:GameControllerInput
stickAverageY	.\handmade.h	/^    float stickAverageY;$/;"	m	struct:GameControllerInput
tJumpTimer	.\handmade.h	/^      float tJumpTimer;$/;"	m	struct:GameState
tSine	.\handmade.h	/^      float tSine;$/;"	m	struct:GameState
tSine	.\win32_handmade.h	/^    float tSine;$/;"	m	struct:win32_soundOutput
toneHz	.\handmade.h	/^      int toneHz;$/;"	m	struct:GameState
transientStorage	.\handmade.h	/^    void *transientStorage;$/;"	m	struct:GameMemory
transientStorageSize	.\handmade.h	/^    uint64_t transientStorageSize;$/;"	m	struct:GameMemory
updateAndRender	.\win32_handmade.cpp	/^    game_update_and_render *updateAndRender;$/;"	m	struct:win32_GameCode	file:
wavePeriod	.\win32_handmade.h	/^    int wavePeriod ;$/;"	m	struct:win32_soundOutput
width	.\handmade.h	/^    int width; $/;"	m	struct:FrameBuffer
width	.\win32_handmade.h	/^    int width; $/;"	m	struct:win32offscreenBuffer
width	.\win32_handmade.h	/^    int width;$/;"	m	struct:win32windowDimensions
win32ClearBuffer	.\win32_handmade.cpp	/^static void win32ClearBuffer(win32_soundOutput *soundOutput)$/;"	f	file:
win32DebugDisplay	.\win32_handmade.cpp	/^static void win32DebugDisplay( win32offscreenBuffer *buffer,$/;"	f	file:
win32DebugDrawVertical	.\win32_handmade.cpp	/^static void win32DebugDrawVertical(win32offscreenBuffer *buffer, int x, int top, int bottom, uint32_t color)$/;"	f	file:
win32DebugTimeMarker	.\win32_handmade.h	/^struct win32DebugTimeMarker {$/;"	s
win32DrawSoundBufferMarker	.\win32_handmade.cpp	/^inline void win32DrawSoundBufferMarker ( win32offscreenBuffer *buffer,$/;"	f
win32FillSoundBuffer	.\win32_handmade.cpp	/^static void win32FillSoundBuffer(win32_soundOutput *soundOutput, SoundBuffer *soundBuffer, DWORD byteToLock, DWORD bytesToWrite)$/;"	f	file:
win32InitSound	.\win32_handmade.cpp	/^static void win32InitSound(HWND hwnd, int32_t samplesPerSecond, int32_t bufferSize){$/;"	f	file:
win32LoadGameCode	.\win32_handmade.cpp	/^win32_GameCode win32LoadGameCode(char * sourceDllName,char *tempDllName)$/;"	f
win32LoadInput	.\win32_handmade.cpp	/^static void win32LoadInput(void) $/;"	f	file:
win32ProcessDigitalButton	.\win32_handmade.cpp	/^static void win32ProcessDigitalButton($/;"	f	file:
win32ProcessKeyboardMessage	.\win32_handmade.cpp	/^static void win32ProcessKeyboardMessage($/;"	f	file:
win32ProcessPendingMessages	.\win32_handmade.cpp	/^static void win32ProcessPendingMessages($/;"	f	file:
win32ProcessXInputStickPosition	.\win32_handmade.cpp	/^static float win32ProcessXInputStickPosition(SHORT value,$/;"	f	file:
win32UnloadGameCode	.\win32_handmade.cpp	/^void win32UnloadGameCode(win32_GameCode *gameCode) $/;"	f
win32_GameCode	.\win32_handmade.cpp	/^struct win32_GameCode{$/;"	s	file:
win32_State	.\win32_handmade.h	/^struct win32_State{$/;"	s
win32_beginInputPlayback	.\win32_handmade.cpp	/^win32_beginInputPlayback(win32_State state, int inputPlayingIndex)$/;"	f
win32_beginRecordingInput	.\win32_handmade.cpp	/^win32_beginRecordingInput(win32_State state,int inputRecordingIndex)$/;"	f
win32_endInputPlayback	.\win32_handmade.cpp	/^win32_endInputPlayback(win32_State state)$/;"	f
win32_endRecordingInput	.\win32_handmade.cpp	/^win32_endRecordingInput(win32_State state)$/;"	f
win32_getFileDate	.\win32_handmade.cpp	/^inline FILETIME win32_getFileDate(char *fileName) {$/;"	f
win32_playbackInput	.\win32_handmade.cpp	/^win32_playbackInput(win32_State state,GameInput *newInput)$/;"	f
win32_recordInput	.\win32_handmade.cpp	/^win32_recordInput(win32_State state,GameInput *newInput)$/;"	f
win32_soundOutput	.\win32_handmade.h	/^struct win32_soundOutput {$/;"	s
win32getSecondsElapsed	.\win32_handmade.cpp	/^inline float win32getSecondsElapsed(LARGE_INTEGER start, LARGE_INTEGER end) $/;"	f
win32getWallClock	.\win32_handmade.cpp	/^inline LARGE_INTEGER win32getWallClock(void)$/;"	f
win32getWindowDimensions	.\win32_handmade.cpp	/^static win32windowDimensions win32getWindowDimensions(HWND hwnd) $/;"	f	file:
win32offscreenBuffer	.\win32_handmade.h	/^struct win32offscreenBuffer {$/;"	s
win32windowDimensions	.\win32_handmade.h	/^struct win32windowDimensions{$/;"	s
x_input_get_state	.\win32_handmade.cpp	/^typedef X_INPUT_GET_STATE(x_input_get_state);$/;"	t	file:
x_input_set_state	.\win32_handmade.cpp	/^typedef X_INPUT_SET_STATE(x_input_set_state);$/;"	t	file:
