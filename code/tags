!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRAY_COUNT	.\handmade.h	10;"	d
ASSERT	.\handmade.h	18;"	d
ASSERT	.\handmade.h	21;"	d
BLUE_COLOR	.\handmade.cpp	13;"	d	file:
BitScanResult	.\handmade_intrinsics.h	/^struct BitScanResult {$/;"	s
BitmapHeader	.\handmade.cpp	/^struct BitmapHeader {$/;"	s	file:
COMPILER_LLVM	.\handmade_platform.h	13;"	d
COMPILER_LLVM	.\handmade_platform.h	21;"	d
COMPILER_LLVM	.\handmade_platform.h	22;"	d
COMPILER_MSVC	.\handmade_platform.h	18;"	d
COMPILER_MSVC	.\handmade_platform.h	19;"	d
COMPILER_MSVC	.\handmade_platform.h	9;"	d
CommonCompilerFlags	.\build.bat	/^set CommonCompilerFlags=-MTd -nologo -fp:fast -Gm- -GR- -EHa- -Od -Oi -WX -W4 -wd4201 -wd4100 -wd4189 -wd4505 -DDEBUG_MODE=1 -DHANDMADE_WIN32=1 -FC -Z7$/;"	v
CommonLinkerFlags	.\build.bat	/^set CommonLinkerFlags=-incremental:no -opt:ref user32.lib gdi32.lib winmm.lib$/;"	v
DEBUGFreeFileMemory	.\handmade.h	/^    debug_free_file_memory *DEBUGFreeFileMemory;$/;"	m	struct:GameMemory
DEBUGFreeFileMemory	.\handmade_platform.h	/^DEBUG_FREE_FILE_MEMORY(DEBUGFreeFileMemory);$/;"	v
DEBUGReadEntireFile	.\handmade.h	/^    debug_read_entire_file *DEBUGReadEntireFile;$/;"	m	struct:GameMemory
DEBUGReadEntireFile	.\handmade_platform.h	/^DEBUG_READ_ENTIRE_FILE(DEBUGReadEntireFile);$/;"	v
DEBUGWriteEntireFile	.\handmade.h	/^    debug_write_entire_file *DEBUGWriteEntireFile;$/;"	m	struct:GameMemory
DEBUGWriteEntireFile	.\handmade_platform.h	/^DEBUG_WRITE_ENTIRE_FILE(DEBUGWriteEntireFile);$/;"	v
DEBUG_FREE_FILE_MEMORY	.\handmade_platform.h	49;"	d
DEBUG_FREE_FILE_MEMORY	.\win32_handmade.cpp	/^DEBUG_FREE_FILE_MEMORY(DEBUGFreeFileMemory)$/;"	f
DEBUG_READ_ENTIRE_FILE	.\handmade_platform.h	40;"	d
DEBUG_READ_ENTIRE_FILE	.\win32_handmade.cpp	/^DEBUG_READ_ENTIRE_FILE(DEBUGReadEntireFile)$/;"	f
DEBUG_WRITE_ENTIRE_FILE	.\handmade_platform.h	44;"	d
DEBUG_WRITE_ENTIRE_FILE	.\win32_handmade.cpp	/^DEBUG_WRITE_ENTIRE_FILE(DEBUGWriteEntireFile)$/;"	f
DEBUGloadBMP	.\handmade.cpp	/^static LoadedBitmap DEBUGloadBMP(ThreadContext *thread, $/;"	f	file:
DIRECTSOUND_CREATE	.\win32_handmade.cpp	358;"	d	file:
Entity	.\handmade.h	/^struct Entity{$/;"	s
FrameBuffer	.\handmade.h	/^struct FrameBuffer {$/;"	s
GAME_GET_SOUND_SAMPLES	.\handmade.h	116;"	d
GAME_UPDATE_AND_RENDER	.\handmade.cpp	/^extern "C" GAME_UPDATE_AND_RENDER(gameUpdateAndRender) $/;"	f
GAME_UPDATE_AND_RENDER	.\handmade.h	111;"	d
GIGABYTES	.\handmade.h	13;"	d
GREEN_COLOR	.\handmade.cpp	11;"	d	file:
GameButtonState	.\handmade.h	/^struct GameButtonState {$/;"	s
GameControllerInput	.\handmade.h	/^struct GameControllerInput{$/;"	s
GameInput	.\handmade.h	/^struct GameInput {$/;"	s
GameMemory	.\handmade.h	/^struct GameMemory{$/;"	s
GameState	.\handmade.h	/^struct GameState {$/;"	s
HANDMADE_H	.\handmade.h	176;"	d
HANDMADE_MATH	.\handmade_math.h	2;"	d
HANDMADE_PLATFORM	.\handmade_platform.h	53;"	d
HANDMADE_TILEMAP	.\handmade_tilemap.h	2;"	d
HeroBitmaps	.\handmade.h	/^struct HeroBitmaps {$/;"	s
KILOBYTES	.\handmade.h	15;"	d
LoadedBitmap	.\handmade.h	/^struct LoadedBitmap {$/;"	s
MEGABYTES	.\handmade.h	14;"	d
MainWindowCallback	.\win32_handmade.cpp	/^static LRESULT CALLBACK MainWindowCallback($/;"	f	file:
MemoryArena	.\handmade.h	/^struct MemoryArena {$/;"	s
RED_COLOR	.\handmade.cpp	12;"	d	file:
RenderSoundSamples	.\handmade.cpp	/^void RenderSoundSamples(FrameBuffer  *frameBuffer, SoundBuffer *soundBuffer){$/;"	f
SoundBuffer	.\handmade.h	/^struct SoundBuffer{$/;"	s
TERABYTES	.\handmade.h	12;"	d
ThreadContext	.\handmade_platform.h	/^struct ThreadContext{ $/;"	s
TileChunk	.\handmade_tile.h	/^struct TileChunk {$/;"	s
TileChunk	.\handmade_tilemap.h	/^struct TileChunk {$/;"	s
TileChunkPosition	.\handmade_tile.h	/^struct TileChunkPosition {$/;"	s
TileChunkPosition	.\handmade_tilemap.h	/^struct TileChunkPosition {$/;"	s
TileMap	.\handmade_tile.h	/^struct TileMap {$/;"	s
TileMap	.\handmade_tilemap.h	/^struct TileMap {$/;"	s
TileMapDifference	.\handmade_tilemap.h	/^struct TileMapDifference {$/;"	s
TileMapPosition	.\handmade_tile.h	/^struct TileMapPosition{$/;"	s
TileMapPosition	.\handmade_tilemap.h	/^struct TileMapPosition {$/;"	s
V2	.\handmade_math.h	/^struct V2 {$/;"	s
W32HANDMADE_H	.\win32_handmade.h	2;"	d
WIN32_STATE_FILE_NAME_COUNT	.\win32_handmade.h	34;"	d
Win32ResizeDIBSection	.\win32_handmade.cpp	/^static void Win32ResizeDIBSection($/;"	f	file:
Win32displayBufferInWindow	.\win32_handmade.cpp	/^static void Win32displayBufferInWindow($/;"	f	file:
WinMain	.\win32_handmade.cpp	/^int CALLBACK WinMain($/;"	f
World	.\handmade.h	/^struct World {$/;"	s
XInputGetState	.\win32_handmade.cpp	217;"	d	file:
XInputSetState	.\win32_handmade.cpp	230;"	d	file:
X_INPUT_GET_STATE	.\win32_handmade.cpp	/^X_INPUT_GET_STATE(xInputGetStateStub)$/;"	f
X_INPUT_GET_STATE	.\win32_handmade.cpp	207;"	d	file:
X_INPUT_SET_STATE	.\win32_handmade.cpp	/^X_INPUT_SET_STATE(xInputSetStateStub)$/;"	f
X_INPUT_SET_STATE	.\win32_handmade.cpp	220;"	d	file:
absTileX	.\handmade_tile.h	/^    uint32_t absTileX;$/;"	m	struct:TileMapPosition
absTileX	.\handmade_tilemap.h	/^    uint32_t absTileX;$/;"	m	struct:TileMapPosition
absTileY	.\handmade_tile.h	/^    uint32_t absTileY;$/;"	m	struct:TileMapPosition
absTileY	.\handmade_tilemap.h	/^    uint32_t absTileY;$/;"	m	struct:TileMapPosition
absTileZ	.\handmade_tilemap.h	/^    uint32_t absTileZ;$/;"	m	struct:TileMapPosition
actionDown	.\handmade.h	/^            GameButtonState actionDown;$/;"	m	struct:GameControllerInput::__anon1::__anon2
actionLeft	.\handmade.h	/^            GameButtonState actionLeft;$/;"	m	struct:GameControllerInput::__anon1::__anon2
actionRight	.\handmade.h	/^            GameButtonState actionRight;$/;"	m	struct:GameControllerInput::__anon1::__anon2
actionUp	.\handmade.h	/^            GameButtonState actionUp;$/;"	m	struct:GameControllerInput::__anon1::__anon2
alignX	.\handmade.h	/^    float alignX;$/;"	m	struct:HeroBitmaps
alignY	.\handmade.h	/^    float alignY;$/;"	m	struct:HeroBitmaps
arctan	.\handmade_intrinsics.h	/^inline float arctan(float angle) {$/;"	f
areOnSameTile	.\handmade_tilemap.cpp	/^inline bool32 areOnSameTile(TileMapPosition *a, TileMapPosition *b) $/;"	f
backDrop	.\handmade.h	/^    LoadedBitmap backDrop;$/;"	m	struct:GameState
base	.\handmade.h	/^    uint8_t *base;$/;"	m	struct:MemoryArena
bitmapMemory	.\handmade.h	/^    void *bitmapMemory;$/;"	m	struct:FrameBuffer
bitmapMemory	.\win32_handmade.h	/^    void *bitmapMemory;$/;"	m	struct:win32offscreenBuffer
bitmapOffset	.\handmade.cpp	/^    uint32_t bitmapOffset;$/;"	m	struct:BitmapHeader	file:
bitsPerPixel	.\handmade.cpp	/^    uint16_t bitsPerPixel;$/;"	m	struct:BitmapHeader	file:
blueMask	.\handmade.cpp	/^    uint32_t blueMask;$/;"	m	struct:BitmapHeader	file:
bool32	.\handmade.cpp	9;"	d	file:
bool32	.\handmade_platform.h	6;"	d
buttons	.\handmade.h	/^        GameButtonState buttons[10];$/;"	m	union:GameControllerInput::__anon1
bytesPerPixel	.\handmade.h	/^    int bytesPerPixel; $/;"	m	struct:FrameBuffer
bytesPerPixel	.\win32_handmade.h	/^    int bytesPerPixel ;  $/;"	m	struct:win32offscreenBuffer
bytesPerSample	.\win32_handmade.h	/^    int bytesPerSample ;$/;"	m	struct:win32_soundOutput
cameraFollowingEntityIndex	.\handmade.h	/^    uint32_t cameraFollowingEntityIndex;$/;"	m	struct:GameState
cameraP	.\handmade.h	/^    TileMapPosition cameraP;$/;"	m	struct:GameState
cape	.\handmade.h	/^    LoadedBitmap cape;$/;"	m	struct:HeroBitmaps
catStrings	.\win32_handmade.cpp	/^void catStrings( size_t countA, char *sourceA, $/;"	f
centeredTilePoint	.\handmade_tilemap.cpp	/^inline TileMapPosition centeredTilePoint($/;"	f
chunkDim	.\handmade_tile.h	/^    uint32_t chunkDim;$/;"	m	struct:TileMap
chunkDim	.\handmade_tilemap.h	/^    uint32_t chunkDim;$/;"	m	struct:TileMap
chunkMask	.\handmade_tile.h	/^    uint8_t chunkMask;$/;"	m	struct:TileMap
chunkMask	.\handmade_tilemap.h	/^    uint8_t chunkMask;$/;"	m	struct:TileMap
chunkShift	.\handmade_tile.h	/^    uint32_t chunkShift;$/;"	m	struct:TileMap
chunkShift	.\handmade_tilemap.h	/^    uint32_t chunkShift;$/;"	m	struct:TileMap
colorUsed	.\handmade.cpp	/^    uint32_t colorUsed;$/;"	m	struct:BitmapHeader	file:
colorsImportant	.\handmade.cpp	/^    uint32_t colorsImportant;$/;"	m	struct:BitmapHeader	file:
compression	.\handmade.cpp	/^    uint32_t compression;$/;"	m	struct:BitmapHeader	file:
contentSize	.\handmade_platform.h	/^    uint32_t contentSize;$/;"	m	struct:debugReadFileResult
controllers	.\handmade.h	/^    GameControllerInput controllers[5];$/;"	m	struct:GameInput
cosine	.\handmade_intrinsics.h	/^inline float cosine(float angle) {$/;"	f
dP	.\handmade.h	/^    V2 dP;$/;"	m	struct:Entity
dXY	.\handmade_tilemap.h	/^    V2 dXY;$/;"	m	struct:TileMapDifference
dZ	.\handmade_tilemap.h	/^    float dZ;$/;"	m	struct:TileMapDifference
debugReadFileResult	.\handmade_platform.h	/^struct debugReadFileResult {$/;"	s
debug_free_file_memory	.\handmade_platform.h	/^typedef DEBUG_FREE_FILE_MEMORY(debug_free_file_memory);$/;"	t
debug_read_entire_file	.\handmade_platform.h	/^typedef DEBUG_READ_ENTIRE_FILE(debug_read_entire_file);$/;"	t
debug_write_entire_file	.\handmade_platform.h	/^typedef DEBUG_WRITE_ENTIRE_FILE(debug_write_entire_file);$/;"	t
directsound_create	.\win32_handmade.cpp	/^typedef DIRECTSOUND_CREATE(directsound_create);$/;"	t	file:
drawBitmap	.\handmade.cpp	/^static void drawBitmap(FrameBuffer *buffer, $/;"	f	file:
drawRect	.\handmade.cpp	/^static void drawRect(FrameBuffer *buffer, $/;"	f	file:
dtForFrame	.\handmade.h	/^    float dtForFrame;$/;"	m	struct:GameInput
e	.\handmade_math.h	/^        float e[2];$/;"	m	union:V2::__anon3
endedDown	.\handmade.h	/^    bool32 endedDown;$/;"	m	struct:GameButtonState
entities	.\handmade.h	/^    entity entities[256];$/;"	m	struct:GameState
exists	.\handmade.h	/^    bool32 exists;$/;"	m	struct:Entity
expectedFrameBoundary	.\win32_handmade.h	/^    DWORD expectedFrameBoundary;$/;"	m	struct:win32DebugTimeMarker
fileContent	.\handmade_platform.h	/^    void *fileContent;$/;"	m	struct:debugReadFileResult
fileHandle	.\win32_handmade.h	/^    HANDLE fileHandle;$/;"	m	struct:win32_ReplayBuffer
fileName	.\win32_handmade.h	/^    char fileName[WIN32_STATE_FILE_NAME_COUNT];$/;"	m	struct:win32_ReplayBuffer
fileName	.\win32_handmade.h	/^    char fileName[WIN32_STATE_FILE_NAME_COUNT];$/;"	m	struct:win32_State
fileSize	.\handmade.cpp	/^    uint32_t fileSize;$/;"	m	struct:BitmapHeader	file:
fileType	.\handmade.cpp	/^    uint16_t fileType;$/;"	m	struct:BitmapHeader	file:
filename	.\build.bat	/^REM set filename=handmade_%date:~-4,4%%date:~-10,2%%date:~-7,2%_%time:~0,2%%time:~3,2%%time:~6,2%.pdb$/;"	v
filename	.\build.bat	/^set filename=handmade_%random%.pdb$/;"	v
findLeastSignificantBit	.\handmade_intrinsics.h	/^static BitScanResult findLeastSignificantBit(uint32_t value) {$/;"	f
flipPlayCursor	.\win32_handmade.h	/^    DWORD flipPlayCursor;$/;"	m	struct:win32DebugTimeMarker
flipWriteCursor	.\win32_handmade.h	/^    DWORD flipWriteCursor;$/;"	m	struct:win32DebugTimeMarker
floorFloatToInt	.\handmade_intrinsics.h	/^inline int32_t floorFloatToInt(float floatNumber) $/;"	f
foo	.\handmade.cpp	/^void foo(void)$/;"	f	file:
found	.\handmade_intrinsics.h	/^    bool32 found;$/;"	m	struct:BitScanResult
g_DEBUGShowCursor	.\win32_handmade.cpp	/^static bool32 g_DEBUGShowCursor;$/;"	v	file:
g_frameBuffer	.\win32_handmade.cpp	/^static win32offscreenBuffer g_frameBuffer;$/;"	v	file:
g_pause	.\win32_handmade.cpp	/^static bool g_pause;$/;"	v	file:
g_perfCountFrequency	.\win32_handmade.cpp	/^static int64_t g_perfCountFrequency;$/;"	v	file:
g_running	.\win32_handmade.cpp	/^static bool g_running;$/;"	v	file:
g_secondaryBuffer	.\win32_handmade.cpp	/^static LPDIRECTSOUNDBUFFER g_secondaryBuffer;$/;"	v	file:
g_windowPlacement	.\win32_handmade.cpp	/^static WINDOWPLACEMENT g_windowPlacement= { sizeof(g_windowPlacement) };$/;"	v	file:
gameCodeDLL	.\win32_handmade.cpp	/^    HMODULE gameCodeDLL;$/;"	m	struct:win32_GameCode	file:
gameMemoryBlock	.\win32_handmade.h	/^    void *gameMemoryBlock; $/;"	m	struct:win32_State
gameOutputSound	.\handmade.cpp	/^void gameOutputSound(SoundBuffer *soundBuffer)$/;"	f
gameOutputSound	.\handmade.cpp	/^void gameOutputSound(SoundBuffer *soundBuffer,float tSine, int toneHz)$/;"	f
game_get_sound_samples	.\handmade.h	/^typedef GAME_GET_SOUND_SAMPLES(game_get_sound_samples);$/;"	t
game_update_and_render	.\handmade.h	/^typedef GAME_UPDATE_AND_RENDER(game_update_and_render);$/;"	t
getChunkPositionFor	.\handmade_tilemap.cpp	/^inline TileChunkPosition getChunkPositionFor($/;"	f
getController	.\handmade.h	/^inline GameControllerInput *getController(GameInput *input, int controllerIndex){$/;"	f
getEntity	.\handmade.cpp	/^inline Entity * getEntity(GameState gameState, uint32_t index){$/;"	f
getSoundSamples	.\win32_handmade.cpp	/^    game_get_sound_samples *getSoundSamples;$/;"	m	struct:win32_GameCode	file:
getTileChunk	.\handmade_tilemap.cpp	/^inline TileChunk* getTileChunk(TileMap *tileMap,$/;"	f
getTileValue	.\handmade_tilemap.cpp	/^static uint32_t getTileValue(TileMap *tileMap,  TileMapPosition pos) $/;"	f	file:
getTileValue	.\handmade_tilemap.cpp	/^static uint32_t getTileValue(TileMap *tileMap, $/;"	f	file:
getTileValue	.\handmade_tilemap.cpp	/^static uint32_t getTileValue(TileMap *tileMap,$/;"	f	file:
getTileValueUnchecked	.\handmade_tilemap.cpp	/^inline uint32_t getTileValueUnchecked(TileMap *tileMap,$/;"	f
global_variable	.\win32_handmade.cpp	6;"	d	file:
greenMask	.\handmade.cpp	/^    uint32_t greenMask;$/;"	m	struct:BitmapHeader	file:
halfTransitionCount	.\handmade.h	/^    int halfTransitionCount; $/;"	m	struct:GameButtonState
head	.\handmade.h	/^    LoadedBitmap head;$/;"	m	struct:HeroBitmaps
height	.\handmade.cpp	/^    int32_t height;$/;"	m	struct:BitmapHeader	file:
height	.\handmade.h	/^    int height; $/;"	m	struct:FrameBuffer
height	.\handmade.h	/^    uint32_t height;$/;"	m	struct:LoadedBitmap
height	.\win32_handmade.h	/^    int height; $/;"	m	struct:win32offscreenBuffer
height	.\win32_handmade.h	/^    int height;$/;"	m	struct:win32windowDimensions
heroBitmaps	.\handmade.h	/^    HeroBitmaps heroBitmaps[4];$/;"	m	struct:GameState
heroFacingDirection	.\handmade.h	/^    uint32_t heroFacingDirection = 0;$/;"	m	struct:GameState
horzResolution	.\handmade.cpp	/^    uint32_t horzResolution;$/;"	m	struct:BitmapHeader	file:
index	.\handmade_intrinsics.h	/^    uint32_t index ;$/;"	m	struct:BitScanResult
info	.\win32_handmade.h	/^    BITMAPINFO info;$/;"	m	struct:win32offscreenBuffer
iniatilizeArena	.\handmade_tilemap.cpp	/^static void iniatilizeArena(MemoryArena *arena, $/;"	f	file:
initPlayer	.\handmade.cpp	/^static void initPlayer(Entity *entity) {$/;"	f	file:
inner	.\handmade_math.h	/^inline float inner(V2 v1, V2 v2) $/;"	f
inputPlayingIndex	.\win32_handmade.h	/^    int inputPlayingIndex;$/;"	m	struct:win32_State
inputRecordingIndex	.\win32_handmade.h	/^    int inputRecordingIndex;$/;"	m	struct:win32_State
internal	.\win32_handmade.cpp	5;"	d	file:
isAnalog	.\handmade.h	/^    bool32 isAnalog;$/;"	m	struct:GameControllerInput
isConnected	.\handmade.h	/^    bool32 isConnected;$/;"	m	struct:GameControllerInput
isInitialized	.\handmade.h	/^    bool32 isInitialized;$/;"	m	struct:GameMemory
isTileMapPointEmpty	.\handmade_tilemap.cpp	/^static bool32 isTileMapPointEmpty(TileMap *tileMap, $/;"	f	file:
isTileValueEmpty	.\handmade_tilemap.cpp	/^static bool32 isTileValueEmpty(uint32_t tileValue)  $/;"	f	file:
isValid	.\win32_handmade.cpp	/^    bool32 isValid;$/;"	m	struct:win32_GameCode	file:
lastSlash	.\win32_handmade.h	/^    char *lastSlash ; $/;"	m	struct:win32_State
lastWriteTime	.\win32_handmade.cpp	/^    FILETIME lastWriteTime;$/;"	m	struct:win32_GameCode	file:
leftShoulder	.\handmade.h	/^            GameButtonState leftShoulder;$/;"	m	struct:GameControllerInput::__anon1::__anon2
lengthSq	.\handmade_math.h	/^inline float lengthSq(V2 v) $/;"	f
local_persist	.\win32_handmade.cpp	7;"	d	file:
memoryBlock	.\win32_handmade.h	/^    void *memoryBlock;$/;"	m	struct:win32_ReplayBuffer
memoryMap	.\win32_handmade.h	/^    HANDLE memoryMap;$/;"	m	struct:win32_ReplayBuffer
metersToPixel	.\handmade_tile.h	/^    float metersToPixel;$/;"	m	struct:TileMap
mouseButtons	.\handmade.h	/^    GameButtonState mouseButtons[5];$/;"	m	struct:GameInput
mouseX	.\handmade.h	/^    int32_t mouseX;$/;"	m	struct:GameInput
mouseY	.\handmade.h	/^    int32_t mouseY;$/;"	m	struct:GameInput
mouseZ	.\handmade.h	/^    int32_t mouseZ;$/;"	m	struct:GameInput
moveDown	.\handmade.h	/^            GameButtonState moveDown;$/;"	m	struct:GameControllerInput::__anon1::__anon2
moveLeft	.\handmade.h	/^            GameButtonState moveLeft;$/;"	m	struct:GameControllerInput::__anon1::__anon2
moveRight	.\handmade.h	/^            GameButtonState moveRight;$/;"	m	struct:GameControllerInput::__anon1::__anon2
moveUp	.\handmade.h	/^            GameButtonState moveUp;$/;"	m	struct:GameControllerInput::__anon1::__anon2
offset	.\handmade_tilemap.h	/^    V2 offset;$/;"	m	struct:TileMapPosition
offsetX	.\handmade_tile.h	/^    float offsetX;$/;"	m	struct:TileMapPosition
offsetY	.\handmade_tile.h	/^    float offsetY;$/;"	m	struct:TileMapPosition
operator *	.\handmade_math.h	/^inline V2 operator*(V2 v, float a) $/;"	f
operator *=	.\handmade_math.h	/^inline V2& V2::operator*=(float a) $/;"	f	class:V2
operator +	.\handmade_math.h	/^inline V2 operator+(V2 a, V2 b) $/;"	f
operator +=	.\handmade_math.h	/^inline V2& V2::operator+=(V2 v) $/;"	f	class:V2
operator -	.\handmade_math.h	/^inline V2 operator-(V2 a) $/;"	f
operator -	.\handmade_math.h	/^inline V2 operator-(V2 a, V2 b) $/;"	f
outputByteCount	.\win32_handmade.h	/^    DWORD outputByteCount;$/;"	m	struct:win32DebugTimeMarker
outputLocation	.\win32_handmade.h	/^    DWORD outputLocation;$/;"	m	struct:win32DebugTimeMarker
outputPlayCursor	.\win32_handmade.h	/^    DWORD outputPlayCursor;$/;"	m	struct:win32DebugTimeMarker
outputWriteCursor	.\win32_handmade.h	/^    DWORD outputWriteCursor;$/;"	m	struct:win32DebugTimeMarker
pXinputGetState	.\win32_handmade.cpp	/^static x_input_get_state *pXinputGetState = xInputGetStateStub;$/;"	v	file:
pXinputSetState	.\win32_handmade.cpp	/^static x_input_set_state *pXinputSetState = xInputSetStateStub;$/;"	v	file:
permanentStorage	.\handmade.h	/^    void *permanentStorage;$/;"	m	struct:GameMemory
permanentStorageSize	.\handmade.h	/^    uint64_t permanentStorageSize;$/;"	m	struct:GameMemory
pi	.\handmade.cpp	10;"	d	file:
pitch	.\handmade.h	/^    int pitch;  $/;"	m	struct:FrameBuffer
pitch	.\win32_handmade.h	/^    int pitch;  $/;"	m	struct:win32offscreenBuffer
pixels	.\handmade.h	/^    uint32_t *pixels;$/;"	m	struct:LoadedBitmap
placeHolder	.\handmade_platform.h	/^    int placeHolder;$/;"	m	struct:ThreadContext
planes	.\handmade.cpp	/^    uint16_t planes;$/;"	m	struct:BitmapHeader	file:
playbackHandle	.\win32_handmade.h	/^    HANDLE playbackHandle;$/;"	m	struct:win32_State
playerIndexForController	.\handmade.h	/^    uint32_t playerIndexForController[ARRAY_COUNT(((GameInput*)0)->controllers)];$/;"	m	struct:GameState
position	.\handmade.h	/^    TileMapPosition position;$/;"	m	struct:Entity
pushArray	.\handmade.h	165;"	d
pushSize_	.\handmade.h	/^void *pushSize_(MemoryArena *arena, size_t size) $/;"	f
pushStruct	.\handmade.h	164;"	d
randomNumberTable	.\handmade_random.h	/^uint32_t randomNumberTable [] = $/;"	v
recanonicalizeCoord	.\handmade_tilemap.cpp	/^inline void recanonicalizeCoord(TileMap *tileMap,$/;"	f
recanonicalizePosition	.\handmade_tilemap.cpp	/^inline TileMapPosition recanonicalizePosition(TileMap *tileMap, TileMapPosition pos) $/;"	f
recordingHandle	.\win32_handmade.h	/^    HANDLE recordingHandle;$/;"	m	struct:win32_State
redMask	.\handmade.cpp	/^    uint32_t redMask;$/;"	m	struct:BitmapHeader	file:
relTileX	.\handmade_tile.h	/^    uint32_t relTileX;$/;"	m	struct:TileChunkPosition
relTileX	.\handmade_tilemap.h	/^    uint32_t relTileX;$/;"	m	struct:TileChunkPosition
relTileY	.\handmade_tile.h	/^    uint32_t relTileY;$/;"	m	struct:TileChunkPosition
relTileY	.\handmade_tilemap.h	/^    uint32_t relTileY;$/;"	m	struct:TileChunkPosition
renderPlayer	.\handmade.cpp	/^static void renderPlayer(FrameBuffer *buffer, int playerP.tileRelX, int playerP.tileRelY)$/;"	f	file:
renderWeirdGradient	.\handmade.cpp	/^void renderWeirdGradient(FrameBuffer *buffer,int xOffset,int yOffset)      $/;"	f
replayBuffers	.\win32_handmade.h	/^    win32_ReplayBuffer replayBuffers[4];$/;"	m	struct:win32_State
reserved1	.\handmade.cpp	/^    uint16_t reserved1;$/;"	m	struct:BitmapHeader	file:
reserved2	.\handmade.cpp	/^    uint16_t reserved2;$/;"	m	struct:BitmapHeader	file:
rightShoulder	.\handmade.h	/^            GameButtonState rightShoulder;$/;"	m	struct:GameControllerInput::__anon1::__anon2
roundFloatToInt	.\handmade_intrinsics.h	/^inline int32_t roundFloatToInt(float floatNumber) $/;"	f
runningSampleIndex	.\win32_handmade.h	/^    uint32_t runningSampleIndex ;$/;"	m	struct:win32_soundOutput
safeTruncateUint64	.\handmade.h	/^inline int32_t safeTruncateUint64(uint64_t value) {$/;"	f
safetyBytes	.\win32_handmade.h	/^    DWORD safetyBytes;$/;"	m	struct:win32_soundOutput
sampleCount	.\handmade.h	/^    int sampleCount;$/;"	m	struct:SoundBuffer
samples	.\handmade.h	/^    int16_t *samples;  $/;"	m	struct:SoundBuffer
samplesPerSecond	.\handmade.h	/^    int samplesPerSecond;$/;"	m	struct:SoundBuffer
samplesPerSecond	.\win32_handmade.h	/^    int samplesPerSecond ;$/;"	m	struct:win32_soundOutput
secondaryBufferSize	.\win32_handmade.h	/^    int secondaryBufferSize ;$/;"	m	struct:win32_soundOutput
setTileValue	.\handmade_tilemap.cpp	/^static void setTileValue(MemoryArena *arena,$/;"	f	file:
setTileValue	.\handmade_tilemap.cpp	/^static void setTileValue(TileMap *tileMap,$/;"	f	file:
setTileValueUnchecked	.\handmade_tilemap.cpp	/^inline void setTileValueUnchecked(TileMap *tileMap,$/;"	f
sine	.\handmade_intrinsics.h	/^inline float sine(float angle) {$/;"	f
size	.\handmade.cpp	/^    uint32_t size;$/;"	m	struct:BitmapHeader	file:
size	.\handmade.h	/^    size_t size ;$/;"	m	struct:MemoryArena
sizeOfBitmap	.\handmade.cpp	/^    uint32_t sizeOfBitmap;$/;"	m	struct:BitmapHeader	file:
square	.\handmade_math.h	/^inline float square(float a) $/;"	f
stickAverageX	.\handmade.h	/^    float stickAverageX;$/;"	m	struct:GameControllerInput
stickAverageY	.\handmade.h	/^    float stickAverageY;$/;"	m	struct:GameControllerInput
stringLength	.\win32_handmade.cpp	/^static int stringLength(char *string) {$/;"	f	file:
subtract	.\handmade_tilemap.cpp	/^inline TileMapDifference subtract(TileMap *tileMap, TileMapPosition *a, TileMapPosition *b) $/;"	f
tSine	.\win32_handmade.h	/^    float tSine;$/;"	m	struct:win32_soundOutput
tileChunkCountX	.\handmade_tile.h	/^    uint32_t tileChunkCountX;$/;"	m	struct:TileMap
tileChunkCountX	.\handmade_tilemap.h	/^    uint32_t tileChunkCountX;$/;"	m	struct:TileMap
tileChunkCountY	.\handmade_tile.h	/^    uint32_t tileChunkCountY;$/;"	m	struct:TileMap
tileChunkCountY	.\handmade_tilemap.h	/^    uint32_t tileChunkCountY;$/;"	m	struct:TileMap
tileChunkCountZ	.\handmade_tilemap.h	/^    uint32_t tileChunkCountZ;$/;"	m	struct:TileMap
tileChunkX	.\handmade_tile.h	/^    uint32_t tileChunkX;$/;"	m	struct:TileChunkPosition
tileChunkX	.\handmade_tilemap.h	/^    uint32_t tileChunkX;$/;"	m	struct:TileChunkPosition
tileChunkY	.\handmade_tile.h	/^    uint32_t tileChunkY;$/;"	m	struct:TileChunkPosition
tileChunkY	.\handmade_tilemap.h	/^    uint32_t tileChunkY;$/;"	m	struct:TileChunkPosition
tileChunkZ	.\handmade_tilemap.h	/^    uint32_t tileChunkZ;$/;"	m	struct:TileChunkPosition
tileChunks	.\handmade_tile.h	/^    TileChunk *tileChunks;$/;"	m	struct:TileMap
tileChunks	.\handmade_tilemap.h	/^    TileChunk *tileChunks;$/;"	m	struct:TileMap
tileMap	.\handmade.h	/^    TileMap *tileMap;$/;"	m	struct:World
tileRadiusInMeters	.\handmade_tile.h	/^    float tileRadiusInMeters;$/;"	m	struct:TileMap
tileRadiusInMeters	.\handmade_tilemap.h	/^    float tileRadiusInMeters;$/;"	m	struct:TileMap
tileSizeInMeters	.\handmade_tile.h	/^    float tileSizeInMeters;$/;"	m	struct:TileMap
tileSizeInMeters	.\handmade_tilemap.h	/^    float tileSizeInMeters;$/;"	m	struct:TileMap
tileSizeInPixels	.\handmade_tile.h	/^    int32_t tileSizeInPixels;$/;"	m	struct:TileMap
tiles	.\handmade_tile.h	/^    uint32_t  *tiles;$/;"	m	struct:TileChunk
tiles	.\handmade_tilemap.h	/^    uint32_t  *tiles;$/;"	m	struct:TileChunk
toggleFullScreen	.\win32_handmade.cpp	/^void toggleFullScreen(HWND hwnd)$/;"	f
torso	.\handmade.h	/^    LoadedBitmap torso;$/;"	m	struct:HeroBitmaps
totalSize	.\win32_handmade.h	/^    uint64_t totalSize;$/;"	m	struct:win32_State
transientStorage	.\handmade.h	/^    void *transientStorage;$/;"	m	struct:GameMemory
transientStorageSize	.\handmade.h	/^    uint64_t transientStorageSize;$/;"	m	struct:GameMemory
truncateFloatToInt	.\handmade_intrinsics.h	/^inline int32_t truncateFloatToInt(float floatNumber) $/;"	f
updateAndRender	.\win32_handmade.cpp	/^    game_update_and_render *updateAndRender;$/;"	m	struct:win32_GameCode	file:
used	.\handmade.h	/^    size_t used;$/;"	m	struct:MemoryArena
v2	.\handmade_math.h	/^inline V2 v2(float a, float b)$/;"	f
vertResolution	.\handmade.cpp	/^    uint32_t vertResolution;$/;"	m	struct:BitmapHeader	file:
wavePeriod	.\win32_handmade.h	/^    int wavePeriod ;$/;"	m	struct:win32_soundOutput
width	.\handmade.cpp	/^    int32_t width;$/;"	m	struct:BitmapHeader	file:
width	.\handmade.h	/^    int width; $/;"	m	struct:FrameBuffer
width	.\handmade.h	/^    uint32_t width;$/;"	m	struct:LoadedBitmap
width	.\win32_handmade.h	/^    int width; $/;"	m	struct:win32offscreenBuffer
width	.\win32_handmade.h	/^    int width;$/;"	m	struct:win32windowDimensions
win32ClearBuffer	.\win32_handmade.cpp	/^static void win32ClearBuffer(win32_soundOutput *soundOutput)$/;"	f	file:
win32DebugTimeMarker	.\win32_handmade.h	/^struct win32DebugTimeMarker {$/;"	s
win32FillSoundBuffer	.\win32_handmade.cpp	/^static void win32FillSoundBuffer(win32_soundOutput *soundOutput, $/;"	f	file:
win32InitSound	.\win32_handmade.cpp	/^static void win32InitSound(HWND hwnd, $/;"	f	file:
win32LoadGameCode	.\win32_handmade.cpp	/^win32_GameCode win32LoadGameCode(char * sourceDllName,char *tempDllName,char *lockFileName)$/;"	f
win32LoadInput	.\win32_handmade.cpp	/^static void win32LoadInput(void) $/;"	f	file:
win32ProcessDigitalButton	.\win32_handmade.cpp	/^static void win32ProcessDigitalButton($/;"	f	file:
win32ProcessKeyboardMessage	.\win32_handmade.cpp	/^static void win32ProcessKeyboardMessage($/;"	f	file:
win32ProcessPendingMessages	.\win32_handmade.cpp	/^static void win32ProcessPendingMessages($/;"	f	file:
win32ProcessXInputStickPosition	.\win32_handmade.cpp	/^static float win32ProcessXInputStickPosition(SHORT value,$/;"	f	file:
win32UnloadGameCode	.\win32_handmade.cpp	/^void win32UnloadGameCode(win32_GameCode *gameCode) $/;"	f
win32_GameCode	.\win32_handmade.cpp	/^struct win32_GameCode{$/;"	s	file:
win32_ReplayBuffer	.\win32_handmade.h	/^struct win32_ReplayBuffer $/;"	s
win32_State	.\win32_handmade.h	/^struct win32_State{$/;"	s
win32_beginInputPlayback	.\win32_handmade.cpp	/^void win32_beginInputPlayback(win32_State *state, int inputPlayingIndex)$/;"	f
win32_beginRecordingInput	.\win32_handmade.cpp	/^void win32_beginRecordingInput(win32_State *state,int inputRecordingIndex)$/;"	f
win32_buildPathFileName	.\win32_handmade.cpp	/^static  void win32_buildPathFileName (win32_State *state, char *fileName,$/;"	f	file:
win32_endInputPlayback	.\win32_handmade.cpp	/^void  win32_endInputPlayback(win32_State *state)$/;"	f
win32_endRecordingInput	.\win32_handmade.cpp	/^void win32_endRecordingInput(win32_State *state)$/;"	f
win32_getFileDate	.\win32_handmade.cpp	/^inline FILETIME win32_getFileDate(char *fileName) {$/;"	f
win32_getFileName	.\win32_handmade.cpp	/^static void win32_getFileName(win32_State *state) {$/;"	f	file:
win32_getInputFileLocation	.\win32_handmade.cpp	/^static void win32_getInputFileLocation (win32_State *state ,$/;"	f	file:
win32_getReplayBuffer	.\win32_handmade.cpp	/^static win32_ReplayBuffer *win32_getReplayBuffer(win32_State *state, $/;"	f	file:
win32_playbackInput	.\win32_handmade.cpp	/^void win32_playbackInput(win32_State *state,GameInput *newInput)$/;"	f
win32_recordInput	.\win32_handmade.cpp	/^void win32_recordInput(win32_State *state,GameInput *newInput)$/;"	f
win32_soundOutput	.\win32_handmade.h	/^struct win32_soundOutput {$/;"	s
win32getSecondsElapsed	.\win32_handmade.cpp	/^inline float win32getSecondsElapsed(LARGE_INTEGER start, LARGE_INTEGER end) $/;"	f
win32getWallClock	.\win32_handmade.cpp	/^inline LARGE_INTEGER win32getWallClock(void)$/;"	f
win32getWindowDimensions	.\win32_handmade.cpp	/^static win32windowDimensions win32getWindowDimensions(HWND hwnd) $/;"	f	file:
win32offscreenBuffer	.\win32_handmade.h	/^struct win32offscreenBuffer {$/;"	s
win32windowDimensions	.\win32_handmade.h	/^struct win32windowDimensions{$/;"	s
world	.\handmade.h	/^    World *world;$/;"	m	struct:GameState
worldArena	.\handmade.h	/^    MemoryArena worldArena;$/;"	m	struct:GameState
x	.\handmade_math.h	/^            float x;$/;"	m	struct:V2::__anon3::__anon4
x_input_get_state	.\win32_handmade.cpp	/^typedef X_INPUT_GET_STATE(x_input_get_state);$/;"	t	file:
x_input_set_state	.\win32_handmade.cpp	/^typedef X_INPUT_SET_STATE(x_input_set_state);$/;"	t	file:
y	.\handmade_math.h	/^            float y;$/;"	m	struct:V2::__anon3::__anon4
